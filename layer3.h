#ifndef LAYER3_H_INCLUDED
#define LAYER3_H_INCLUDED
#include "tables.h"

// floatPowIS[]:用于查表求 v^(4/3)，v是经哈夫曼解码出的一个(正)值，该值的范围是0..8191

float floatPowIS[8207];
//  pow_2[] -- 用于查表求 2 ^ exp, exp 是长块(long block)逆量化的指数

float floatPow2[256 + 118 + 4];

struct GRInfo
{
    int part2_3_length;
    int big_values;
    int global_gain;
    int scalefac_compress;
    int window_switching_flag;
    int block_type;
    int mixed_block_flag;
    int table_select[3];
    int subblock_gain[3];
    int region0_count;
    int region1_count;
    int preflag;
    int scalefac_scale;
    int count1table_select;

    int region1Start;
    int region2Start;
    int part2_bits;   //增益因子(scalefactor)比特数

};
typedef struct GRInfo * PGRInfo;
struct Channel
{
    int scfsi[4];
    struct GRInfo gr[2];
};
struct SideInfo
{
    int main_data_begin;
    struct Channel ch[2];
};

typedef struct SideInfo * PSideInfo;
float cs[] = { 0.857492925712f, 0.881741997318f, 0.949628649103f,
               0.983314592492f, 0.995517816065f, 0.999160558175f,
               0.999899195243f, 0.999993155067f
             };
float ca[] = { -0.5144957554270f, -0.4717319685650f,
               -0.3133774542040f, -0.1819131996110f, -0.0945741925262f,
               -0.0409655828852f, -0.0141985685725f, -0.00369997467375f
             };
//MPEG 1.0
float is_coef[] = { 0.0f, 0.211324865f, 0.366025404f, 0.5f,
                    0.633974596f, 0.788675135f, 1.0f
                  };
//MPEG 2.0/2.5
float lsf_is_coef[2][15] =
{
    {
        0.840896415f, 0.707106781f, 0.594603558f, 0.5f,
        0.420448208f, 0.353553391f, 0.297301779f,
        0.25f, 0.210224104f, 0.176776695f,
        0.148650889f, 0.125f, 0.105112052f,
        0.088388348f, 0.074325445f
    },
    {
        0.707106781f, 0.5f, 0.353553391f, 0.25f,
        0.176776695f, 0.125f, 0.088388348f, 0.0625f,
        0.044194174f, 0.03125f, 0.022097087f,
        0.015625f, 0.011048543f, 0.0078125f,
        0.005524272f
    }
};
/*
 * ANNEX B,Table 3-B.8. Layer III scalefactor bands
 */

/* MPEG 1, sampling_frequency=0, 44.1kHz */
const int intSfbIdxLong0[] = { 0, 4, 8, 12, 16, 20, 24, 30, 36, 44,
                               52, 62, 74, 90, 110, 134, 162, 196, 238, 288, 342, 418, 576
                             };
const int intSfbIdxShort0[] = { 0, 4, 8, 12, 16, 22, 30, 40, 52, 66,
                                84, 106, 136, 192
                              };

/* MPEG 1, sampling_frequency=1, 48kHz */
const int intSfbIdxLong1[] = { 0, 4, 8, 12, 16, 20, 24, 30, 36, 42,
                               50, 60, 72, 88, 106, 128, 156, 190, 230, 276, 330, 384, 576
                             };
const int intSfbIdxShort1[] = { 0, 4, 8, 12, 16, 22, 28, 38, 50, 64,
                                80, 100, 126, 192
                              };
/* MPEG 1, sampling_frequency=2, 32kHz */
const int intSfbIdxLong2[] = { 0, 4, 8, 12, 16, 20, 24, 30, 36, 44,
                               54, 66, 82, 102, 126, 156, 194, 240, 296, 364, 448, 550,
                               576
                             };
const int intSfbIdxShort2[] = { 0, 4, 8, 12, 16, 22, 30, 42, 58, 78,
                                104, 138, 180, 192
                              };

/* MPEG 2, sampling_frequency=0, 22.05kHz */
const int	intSfbIdxLong3[] = { 0, 6, 12, 18, 24, 30, 36, 44, 54, 66,
                                 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464, 522,
                                 576
                             };
const int	intSfbIdxShort3[] = { 0, 4, 8, 12, 18, 24, 32, 42, 56, 74,
                                  100, 132, 174, 192
                              };

/* MPEG 2, sampling_frequency=1, 24kHz */
const int	intSfbIdxLong4[] = { 0, 6, 12, 18, 24, 30, 36, 44, 54, 66,
                                 80, 96, 114, 136, 162, 194, 232, 278, 330, 394, 464, 540,
                                 576
                             };
const int	intSfbIdxShort4[] = { 0, 4, 8, 12, 18, 26, 36, 48, 62, 80,
                                  104, 136, 180, 192
                              };
/* MPEG 2, sampling_frequency=2, 16kHz */
const int	intSfbIdxLong5[] = { 0, 6, 12, 18, 24, 30, 36, 44, 54, 66,
                                 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464, 522,
                                 576
                             };
const int	intSfbIdxShort5[] = { 0, 4, 8, 12, 18, 26, 36, 48, 62, 80,
                                  104, 134, 174, 192
                              };
/* MPEG 2.5, sampling_frequency=0, 11.025kHz */
const int	intSfbIdxLong6[] = { 0, 6, 12, 18, 24, 30, 36, 44, 54, 66,
                                 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464, 522,
                                 576
                             };
const int	intSfbIdxShort6[] = { 0, 4, 8, 12, 18, 26, 36, 48, 62, 80,
                                  104, 134, 174, 192
                              };

/* MPEG 2.5, sampling_frequency=1, 12kHz */
const int	intSfbIdxLong7[] = { 0, 6, 12, 18, 24, 30, 36, 44, 54, 66,
                                 80, 96, 116, 140, 168, 200, 238, 284, 336, 396, 464, 522,
                                 576
                             };
const int	intSfbIdxShort7[] = { 0, 4, 8, 12, 18, 26, 36, 48, 62, 80,
                                  104, 134, 174, 192
                              };
/* MPEG 2.5, sampling_frequency=2, 8kHz */
const int	intSfbIdxLong8[] = { 0, 12, 24, 36, 48, 60, 72, 88, 108,
                                 132, 160, 192, 232, 280, 336, 400, 476, 566, 568, 570, 572,
                                 574, 576
                             };
const int	intSfbIdxShort8[] = { 0, 8, 16, 24, 36, 52, 72, 96, 124,
                                  160, 162, 164, 166, 192
                              };
// MPEG 2.0 slen for intensity stereo
int i_slen2[256] =
{
    12288, 12352, 12416, 12480,
    12544, 12608, 12296, 12360,
    12424, 12488, 12552, 12616,
    12304, 12368, 12432, 12496,
    12560, 12624, 12312, 12376,
    12440, 12504, 12568, 12632,
    12320, 12384, 12448, 12512,
    12576, 12640, 12328, 12392,
    12456, 12520, 12584, 12648,
    12289, 12353, 12417, 12481,
    12545, 12609, 12297, 12361,
    12425, 12489, 12553, 12617,
    12305, 12369, 12433, 12497,
    12561, 12625, 12313, 12377,
    12441, 12505, 12569, 12633,
    12321, 12385, 12449, 12513,
    12577, 12641, 12329, 12393,
    12457, 12521, 12585, 12649,
    12290, 12354, 12418, 12482,
    12546, 12610, 12298, 12362,
    12426, 12490, 12554, 12618,
    12306, 12370, 12434, 12498,
    12562, 12626, 12314, 12378,
    12442, 12506, 12570, 12634,
    12322, 12386, 12450, 12514,
    12578, 12642, 12330, 12394,
    12458, 12522, 12586, 12650,
    12291, 12355, 12419, 12483,
    12547, 12611, 12299, 12363,
    12427, 12491, 12555, 12619,
    12307, 12371, 12435, 12499,
    12563, 12627, 12315, 12379,
    12443, 12507, 12571, 12635,
    12323, 12387, 12451, 12515,
    12579, 12643, 12331, 12395,
    12459, 12523, 12587, 12651,
    12292, 12356, 12420, 12484,
    12548, 12612, 12300, 12364,
    12428, 12492, 12556, 12620,
    12308, 12372, 12436, 12500,
    12564, 12628, 12316, 12380,
    12444, 12508, 12572, 12636,
    12324, 12388, 12452, 12516,
    12580, 12644, 12332, 12396,
    12460, 12524, 12588, 12652,
    16384, 16448, 16512, 16576,
    16392, 16456, 16520, 16584,
    16400, 16464, 16528, 16592,
    16408, 16472, 16536, 16600,
    16385, 16449, 16513, 16577,
    16393, 16457, 16521, 16585,
    16401, 16465, 16529, 16593,
    16409, 16473, 16537, 16601,
    16386, 16450, 16514, 16578,
    16394, 16458, 16522, 16586,
    16402, 16466, 16530, 16594,
    16410, 16474, 16538, 16602,
    16387, 16451, 16515, 16579,
    16395, 16459, 16523, 16587,
    16403, 16467, 16531, 16595,
    16411, 16475, 16539, 16603,
    20480, 20488, 20496, 20481,
    20489, 20497, 20482, 20490,
    20498, 20483, 20491, 20499,

};
// MPEG 2.0 slen for 'normal' mode
int n_slen2[512] =
{
    0,   512,  1024,  1536,
    64,   576,  1088,  1600,
    128,   640,  1152,  1664,
    192,   704,  1216,  1728,
    8,   520,  1032,  1544,
    72,   584,  1096,  1608,
    136,   648,  1160,  1672,
    200,   712,  1224,  1736,
    16,   528,  1040,  1552,
    80,   592,  1104,  1616,
    144,   656,  1168,  1680,
    208,   720,  1232,  1744,
    24,   536,  1048,  1560,
    88,   600,  1112,  1624,
    152,   664,  1176,  1688,
    216,   728,  1240,  1752,
    32,   544,  1056,  1568,
    96,   608,  1120,  1632,
    160,   672,  1184,  1696,
    224,   736,  1248,  1760,
    1,   513,  1025,  1537,
    65,   577,  1089,  1601,
    129,   641,  1153,  1665,
    193,   705,  1217,  1729,
    9,   521,  1033,  1545,
    73,   585,  1097,  1609,
    137,   649,  1161,  1673,
    201,   713,  1225,  1737,
    17,   529,  1041,  1553,
    81,   593,  1105,  1617,
    145,   657,  1169,  1681,
    209,   721,  1233,  1745,
    25,   537,  1049,  1561,
    89,   601,  1113,  1625,
    153,   665,  1177,  1689,
    217,   729,  1241,  1753,
    33,   545,  1057,  1569,
    97,   609,  1121,  1633,
    161,   673,  1185,  1697,
    225,   737,  1249,  1761,
    2,   514,  1026,  1538,
    66,   578,  1090,  1602,
    130,   642,  1154,  1666,
    194,   706,  1218,  1730,
    10,   522,  1034,  1546,
    74,   586,  1098,  1610,
    138,   650,  1162,  1674,
    202,   714,  1226,  1738,
    18,   530,  1042,  1554,
    82,   594,  1106,  1618,
    146,   658,  1170,  1682,
    210,   722,  1234,  1746,
    26,   538,  1050,  1562,
    90,   602,  1114,  1626,
    154,   666,  1178,  1690,
    218,   730,  1242,  1754,
    34,   546,  1058,  1570,
    98,   610,  1122,  1634,
    162,   674,  1186,  1698,
    226,   738,  1250,  1762,
    3,   515,  1027,  1539,
    67,   579,  1091,  1603,
    131,   643,  1155,  1667,
    195,   707,  1219,  1731,
    11,   523,  1035,  1547,
    75,   587,  1099,  1611,
    139,   651,  1163,  1675,
    203,   715,  1227,  1739,
    19,   531,  1043,  1555,
    83,   595,  1107,  1619,
    147,   659,  1171,  1683,
    211,   723,  1235,  1747,
    27,   539,  1051,  1563,
    91,   603,  1115,  1627,
    155,   667,  1179,  1691,
    219,   731,  1243,  1755,
    35,   547,  1059,  1571,
    99,   611,  1123,  1635,
    163,   675,  1187,  1699,
    227,   739,  1251,  1763,
    4,   516,  1028,  1540,
    68,   580,  1092,  1604,
    132,   644,  1156,  1668,
    196,   708,  1220,  1732,
    12,   524,  1036,  1548,
    76,   588,  1100,  1612,
    140,   652,  1164,  1676,
    204,   716,  1228,  1740,
    20,   532,  1044,  1556,
    84,   596,  1108,  1620,
    148,   660,  1172,  1684,
    212,   724,  1236,  1748,
    28,   540,  1052,  1564,
    92,   604,  1116,  1628,
    156,   668,  1180,  1692,
    220,   732,  1244,  1756,
    36,   548,  1060,  1572,
    100,   612,  1124,  1636,
    164,   676,  1188,  1700,
    228,   740,  1252,  1764,
    4096,  4160,  4224,  4288,
    4104,  4168,  4232,  4296,
    4112,  4176,  4240,  4304,
    4120,  4184,  4248,  4312,
    4128,  4192,  4256,  4320,
    4097,  4161,  4225,  4289,
    4105,  4169,  4233,  4297,
    4113,  4177,  4241,  4305,
    4121,  4185,  4249,  4313,
    4129,  4193,  4257,  4321,
    4098,  4162,  4226,  4290,
    4106,  4170,  4234,  4298,
    4114,  4178,  4242,  4306,
    4122,  4186,  4250,  4314,
    4130,  4194,  4258,  4322,
    4099,  4163,  4227,  4291,
    4107,  4171,  4235,  4299,
    4115,  4179,  4243,  4307,
    4123,  4187,  4251,  4315,
    4131,  4195,  4259,  4323,
    4100,  4164,  4228,  4292,
    4108,  4172,  4236,  4300,
    4116,  4180,  4244,  4308,
    4124,  4188,  4252,  4316,
    4132,  4196,  4260,  4324,
    40960, 40968, 40976, 40961,
    40969, 40977, 40962, 40970,
    40978, 40963, 40971, 40979,

};
int slen_tab2[3][6][4] =
{
    {   { 6, 5, 5, 5 }, { 6, 5, 7, 3 }, { 11, 10, 0, 0 },
        { 7, 7, 7, 0 }, { 6, 6, 6, 3 }, { 8, 8, 5, 0 }
    },
    {   { 9, 9, 9, 9 }, { 9, 9, 12, 6 }, { 18, 18, 0, 0 },
        { 12, 12, 12, 0 }, { 12, 9, 9, 6 },
        { 15, 12, 9, 0 }
    },
    {   { 6, 9, 9, 9 }, { 6, 9, 12, 6 }, { 15, 18, 0, 0 },
        { 6, 15, 12, 0 }, { 6, 12, 9, 6 }, { 6, 18, 9, 0 }
    }
};
#endif // LAYER3_H_INCLUDED
